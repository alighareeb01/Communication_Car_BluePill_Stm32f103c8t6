
Communication_Car_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bcc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cfc  08000d04  00010d04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cfc  08000cfc  00010d04  2**0
                  CONTENTS
  4 .ARM          00000000  08000cfc  08000cfc  00010d04  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cfc  08000d04  00010d04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cfc  08000cfc  00010cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d00  08000d00  00010d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000000  08000d04  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08000d04  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010d04  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010d2d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001589  00000000  00000000  00010d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000854  00000000  00000000  000122f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000290  00000000  00000000  00012b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001d2  00000000  00000000  00012de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001294  00000000  00000000  00012fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000010ff  00000000  00000000  00014246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000495b  00000000  00000000  00015345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000008a4  00000000  00000000  00019ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0001a544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ce4 	.word	0x08000ce4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000ce4 	.word	0x08000ce4

08000170 <NVIC_EnableIRQ>:
#include "CortexM3/CortexM3_NVIC.h"

/*
 * Enable INT
 */
void NVIC_EnableIRQ(IRQn_Type IRQn) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
	uint32_t Reg_Num = IRQn >> 5;
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	115b      	asrs	r3, r3, #5
 8000180:	b25b      	sxtb	r3, r3
 8000182:	60fb      	str	r3, [r7, #12]
	uint32_t Bit_Num = IRQn % 32;
 8000184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000188:	425a      	negs	r2, r3
 800018a:	f003 031f 	and.w	r3, r3, #31
 800018e:	f002 021f 	and.w	r2, r2, #31
 8000192:	bf58      	it	pl
 8000194:	4253      	negpl	r3, r2
 8000196:	b25b      	sxtb	r3, r3
 8000198:	60bb      	str	r3, [r7, #8]
	if ((uint32_t) (IRQn) >= 0)
	{
		NVIC->ISER[(uint32_t)Reg_Num] = (uint32_t)(1UL << ((uint32_t)Bit_Num));
 800019a:	4906      	ldr	r1, [pc, #24]	; (80001b4 <NVIC_EnableIRQ+0x44>)
 800019c:	2201      	movs	r2, #1
 800019e:	68bb      	ldr	r3, [r7, #8]
 80001a0:	409a      	lsls	r2, r3
 80001a2:	68fb      	ldr	r3, [r7, #12]
 80001a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 80001a8:	bf00      	nop
 80001aa:	3714      	adds	r7, #20
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bc80      	pop	{r7}
 80001b0:	4770      	bx	lr
 80001b2:	bf00      	nop
 80001b4:	e000e100 	.word	0xe000e100

080001b8 <SysTick_Handler>:
void SysTick_SetCallBack(void(*ptrToFun)(void))
{
	PtrCallBack = ptrToFun;
}
void SysTick_Handler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	//call the fun
	PtrCallBack();
 80001bc:	4b0d      	ldr	r3, [pc, #52]	; (80001f4 <SysTick_Handler+0x3c>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4798      	blx	r3
	if(Mode_status == Single_Interval)
 80001c2:	4b0d      	ldr	r3, [pc, #52]	; (80001f8 <SysTick_Handler+0x40>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d111      	bne.n	80001ee <SysTick_Handler+0x36>
	{
		SysTick->RVR = 0;
 80001ca:	4b0c      	ldr	r3, [pc, #48]	; (80001fc <SysTick_Handler+0x44>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	605a      	str	r2, [r3, #4]
		SysTick->CVR = 0;
 80001d0:	4b0a      	ldr	r3, [pc, #40]	; (80001fc <SysTick_Handler+0x44>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	609a      	str	r2, [r3, #8]
		CLR_BIT(SysTick->CSR, 0);
 80001d6:	4b09      	ldr	r3, [pc, #36]	; (80001fc <SysTick_Handler+0x44>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a08      	ldr	r2, [pc, #32]	; (80001fc <SysTick_Handler+0x44>)
 80001dc:	f023 0301 	bic.w	r3, r3, #1
 80001e0:	6013      	str	r3, [r2, #0]
		CLR_BIT(SysTick->CSR,1);
 80001e2:	4b06      	ldr	r3, [pc, #24]	; (80001fc <SysTick_Handler+0x44>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4a05      	ldr	r2, [pc, #20]	; (80001fc <SysTick_Handler+0x44>)
 80001e8:	f023 0302 	bic.w	r3, r3, #2
 80001ec:	6013      	str	r3, [r2, #0]
	}
}
 80001ee:	bf00      	nop
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	2000001c 	.word	0x2000001c
 80001f8:	20000020 	.word	0x20000020
 80001fc:	e000e010 	.word	0xe000e010

08000200 <EXTI_EnableIntLine>:
		NULL,
		NULL,
};

void EXTI_EnableIntLine(Int_Line IntLine)
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	71fb      	strb	r3, [r7, #7]
	if(IntLine <= 15 && IntLine >= 0)
 800020a:	79fb      	ldrb	r3, [r7, #7]
 800020c:	2b0f      	cmp	r3, #15
 800020e:	d809      	bhi.n	8000224 <EXTI_EnableIntLine+0x24>
	{
		SET_BIT(EXTI->IMR, IntLine);
 8000210:	4b07      	ldr	r3, [pc, #28]	; (8000230 <EXTI_EnableIntLine+0x30>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	79fa      	ldrb	r2, [r7, #7]
 8000216:	2101      	movs	r1, #1
 8000218:	fa01 f202 	lsl.w	r2, r1, r2
 800021c:	4611      	mov	r1, r2
 800021e:	4a04      	ldr	r2, [pc, #16]	; (8000230 <EXTI_EnableIntLine+0x30>)
 8000220:	430b      	orrs	r3, r1
 8000222:	6013      	str	r3, [r2, #0]
	}
}
 8000224:	bf00      	nop
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	bc80      	pop	{r7}
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	40010400 	.word	0x40010400

08000234 <EXTI_SetEdge>:
	{
		SET_BIT(EXTI->SWIER, IntLine);
	}
}
void EXTI_SetEdge(Int_Line IntLine, Edge_Type Edge)
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	460a      	mov	r2, r1
 800023e:	71fb      	strb	r3, [r7, #7]
 8000240:	4613      	mov	r3, r2
 8000242:	71bb      	strb	r3, [r7, #6]
	if(IntLine <= 15 && IntLine >= 0)
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	2b0f      	cmp	r3, #15
 8000248:	d84a      	bhi.n	80002e0 <EXTI_SetEdge+0xac>
	{
		switch (Edge) {
 800024a:	79bb      	ldrb	r3, [r7, #6]
 800024c:	2b02      	cmp	r3, #2
 800024e:	d032      	beq.n	80002b6 <EXTI_SetEdge+0x82>
 8000250:	2b02      	cmp	r3, #2
 8000252:	dc45      	bgt.n	80002e0 <EXTI_SetEdge+0xac>
 8000254:	2b00      	cmp	r3, #0
 8000256:	d002      	beq.n	800025e <EXTI_SetEdge+0x2a>
 8000258:	2b01      	cmp	r3, #1
 800025a:	d016      	beq.n	800028a <EXTI_SetEdge+0x56>
				SET_BIT(EXTI->RTSR,IntLine);
				SET_BIT(EXTI->FTSR,IntLine);
				break;
		}
	}
}
 800025c:	e040      	b.n	80002e0 <EXTI_SetEdge+0xac>
				SET_BIT(EXTI->RTSR,IntLine);
 800025e:	4b23      	ldr	r3, [pc, #140]	; (80002ec <EXTI_SetEdge+0xb8>)
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	79fa      	ldrb	r2, [r7, #7]
 8000264:	2101      	movs	r1, #1
 8000266:	fa01 f202 	lsl.w	r2, r1, r2
 800026a:	4611      	mov	r1, r2
 800026c:	4a1f      	ldr	r2, [pc, #124]	; (80002ec <EXTI_SetEdge+0xb8>)
 800026e:	430b      	orrs	r3, r1
 8000270:	6093      	str	r3, [r2, #8]
				CLR_BIT(EXTI->FTSR,IntLine);
 8000272:	4b1e      	ldr	r3, [pc, #120]	; (80002ec <EXTI_SetEdge+0xb8>)
 8000274:	68db      	ldr	r3, [r3, #12]
 8000276:	79fa      	ldrb	r2, [r7, #7]
 8000278:	2101      	movs	r1, #1
 800027a:	fa01 f202 	lsl.w	r2, r1, r2
 800027e:	43d2      	mvns	r2, r2
 8000280:	4611      	mov	r1, r2
 8000282:	4a1a      	ldr	r2, [pc, #104]	; (80002ec <EXTI_SetEdge+0xb8>)
 8000284:	400b      	ands	r3, r1
 8000286:	60d3      	str	r3, [r2, #12]
				break;
 8000288:	e02a      	b.n	80002e0 <EXTI_SetEdge+0xac>
				CLR_BIT(EXTI->RTSR,IntLine);
 800028a:	4b18      	ldr	r3, [pc, #96]	; (80002ec <EXTI_SetEdge+0xb8>)
 800028c:	689b      	ldr	r3, [r3, #8]
 800028e:	79fa      	ldrb	r2, [r7, #7]
 8000290:	2101      	movs	r1, #1
 8000292:	fa01 f202 	lsl.w	r2, r1, r2
 8000296:	43d2      	mvns	r2, r2
 8000298:	4611      	mov	r1, r2
 800029a:	4a14      	ldr	r2, [pc, #80]	; (80002ec <EXTI_SetEdge+0xb8>)
 800029c:	400b      	ands	r3, r1
 800029e:	6093      	str	r3, [r2, #8]
				SET_BIT(EXTI->FTSR,IntLine);
 80002a0:	4b12      	ldr	r3, [pc, #72]	; (80002ec <EXTI_SetEdge+0xb8>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	79fa      	ldrb	r2, [r7, #7]
 80002a6:	2101      	movs	r1, #1
 80002a8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ac:	4611      	mov	r1, r2
 80002ae:	4a0f      	ldr	r2, [pc, #60]	; (80002ec <EXTI_SetEdge+0xb8>)
 80002b0:	430b      	orrs	r3, r1
 80002b2:	60d3      	str	r3, [r2, #12]
				break;
 80002b4:	e014      	b.n	80002e0 <EXTI_SetEdge+0xac>
				SET_BIT(EXTI->RTSR,IntLine);
 80002b6:	4b0d      	ldr	r3, [pc, #52]	; (80002ec <EXTI_SetEdge+0xb8>)
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	79fa      	ldrb	r2, [r7, #7]
 80002bc:	2101      	movs	r1, #1
 80002be:	fa01 f202 	lsl.w	r2, r1, r2
 80002c2:	4611      	mov	r1, r2
 80002c4:	4a09      	ldr	r2, [pc, #36]	; (80002ec <EXTI_SetEdge+0xb8>)
 80002c6:	430b      	orrs	r3, r1
 80002c8:	6093      	str	r3, [r2, #8]
				SET_BIT(EXTI->FTSR,IntLine);
 80002ca:	4b08      	ldr	r3, [pc, #32]	; (80002ec <EXTI_SetEdge+0xb8>)
 80002cc:	68db      	ldr	r3, [r3, #12]
 80002ce:	79fa      	ldrb	r2, [r7, #7]
 80002d0:	2101      	movs	r1, #1
 80002d2:	fa01 f202 	lsl.w	r2, r1, r2
 80002d6:	4611      	mov	r1, r2
 80002d8:	4a04      	ldr	r2, [pc, #16]	; (80002ec <EXTI_SetEdge+0xb8>)
 80002da:	430b      	orrs	r3, r1
 80002dc:	60d3      	str	r3, [r2, #12]
				break;
 80002de:	bf00      	nop
}
 80002e0:	bf00      	nop
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	40010400 	.word	0x40010400

080002f0 <EXTI_SetMapping>:
void EXTI_SetMapping(Int_Line IntLine,EXTI_PORTS Port)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	460a      	mov	r2, r1
 80002fa:	71fb      	strb	r3, [r7, #7]
 80002fc:	4613      	mov	r3, r2
 80002fe:	71bb      	strb	r3, [r7, #6]
	if(IntLine <= 15 && IntLine >= 0)
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	2b0f      	cmp	r3, #15
 8000304:	f200 810a 	bhi.w	800051c <EXTI_SetMapping+0x22c>
	{
	switch(IntLine)
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	2b0f      	cmp	r3, #15
 800030c:	f200 8106 	bhi.w	800051c <EXTI_SetMapping+0x22c>
 8000310:	a201      	add	r2, pc, #4	; (adr r2, 8000318 <EXTI_SetMapping+0x28>)
 8000312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000316:	bf00      	nop
 8000318:	08000359 	.word	0x08000359
 800031c:	08000373 	.word	0x08000373
 8000320:	08000391 	.word	0x08000391
 8000324:	080003af 	.word	0x080003af
 8000328:	080003cd 	.word	0x080003cd
 800032c:	080003e7 	.word	0x080003e7
 8000330:	08000405 	.word	0x08000405
 8000334:	08000423 	.word	0x08000423
 8000338:	08000441 	.word	0x08000441
 800033c:	0800045b 	.word	0x0800045b
 8000340:	08000479 	.word	0x08000479
 8000344:	08000497 	.word	0x08000497
 8000348:	080004b5 	.word	0x080004b5
 800034c:	080004cf 	.word	0x080004cf
 8000350:	080004e9 	.word	0x080004e9
 8000354:	08000503 	.word	0x08000503
	{
	case EXTI_LINE0:
		AFIO->EXTICR1 &= ~(0b1111 << 0);
 8000358:	4b73      	ldr	r3, [pc, #460]	; (8000528 <EXTI_SetMapping+0x238>)
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	4a72      	ldr	r2, [pc, #456]	; (8000528 <EXTI_SetMapping+0x238>)
 800035e:	f023 030f 	bic.w	r3, r3, #15
 8000362:	6093      	str	r3, [r2, #8]
		AFIO->EXTICR1 |= (Port << 0);
 8000364:	4b70      	ldr	r3, [pc, #448]	; (8000528 <EXTI_SetMapping+0x238>)
 8000366:	689a      	ldr	r2, [r3, #8]
 8000368:	79bb      	ldrb	r3, [r7, #6]
 800036a:	496f      	ldr	r1, [pc, #444]	; (8000528 <EXTI_SetMapping+0x238>)
 800036c:	4313      	orrs	r3, r2
 800036e:	608b      	str	r3, [r1, #8]
		break;
 8000370:	e0d4      	b.n	800051c <EXTI_SetMapping+0x22c>
	case EXTI_LINE1:
		AFIO->EXTICR1 &= ~(0b1111 << 4);
 8000372:	4b6d      	ldr	r3, [pc, #436]	; (8000528 <EXTI_SetMapping+0x238>)
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	4a6c      	ldr	r2, [pc, #432]	; (8000528 <EXTI_SetMapping+0x238>)
 8000378:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800037c:	6093      	str	r3, [r2, #8]
		AFIO->EXTICR1 |= (Port << 4);
 800037e:	4b6a      	ldr	r3, [pc, #424]	; (8000528 <EXTI_SetMapping+0x238>)
 8000380:	689b      	ldr	r3, [r3, #8]
 8000382:	79ba      	ldrb	r2, [r7, #6]
 8000384:	0112      	lsls	r2, r2, #4
 8000386:	4611      	mov	r1, r2
 8000388:	4a67      	ldr	r2, [pc, #412]	; (8000528 <EXTI_SetMapping+0x238>)
 800038a:	430b      	orrs	r3, r1
 800038c:	6093      	str	r3, [r2, #8]
		break;
 800038e:	e0c5      	b.n	800051c <EXTI_SetMapping+0x22c>
	case EXTI_LINE2:
		AFIO->EXTICR1 &= ~(0b1111 << 8);
 8000390:	4b65      	ldr	r3, [pc, #404]	; (8000528 <EXTI_SetMapping+0x238>)
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	4a64      	ldr	r2, [pc, #400]	; (8000528 <EXTI_SetMapping+0x238>)
 8000396:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800039a:	6093      	str	r3, [r2, #8]
		AFIO->EXTICR1 |= (Port << 8);
 800039c:	4b62      	ldr	r3, [pc, #392]	; (8000528 <EXTI_SetMapping+0x238>)
 800039e:	689b      	ldr	r3, [r3, #8]
 80003a0:	79ba      	ldrb	r2, [r7, #6]
 80003a2:	0212      	lsls	r2, r2, #8
 80003a4:	4611      	mov	r1, r2
 80003a6:	4a60      	ldr	r2, [pc, #384]	; (8000528 <EXTI_SetMapping+0x238>)
 80003a8:	430b      	orrs	r3, r1
 80003aa:	6093      	str	r3, [r2, #8]
		break;
 80003ac:	e0b6      	b.n	800051c <EXTI_SetMapping+0x22c>
	case EXTI_LINE3:
		AFIO->EXTICR1 &= ~(0b1111 << 12);
 80003ae:	4b5e      	ldr	r3, [pc, #376]	; (8000528 <EXTI_SetMapping+0x238>)
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	4a5d      	ldr	r2, [pc, #372]	; (8000528 <EXTI_SetMapping+0x238>)
 80003b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80003b8:	6093      	str	r3, [r2, #8]
		AFIO->EXTICR1 |= (Port << 12);
 80003ba:	4b5b      	ldr	r3, [pc, #364]	; (8000528 <EXTI_SetMapping+0x238>)
 80003bc:	689b      	ldr	r3, [r3, #8]
 80003be:	79ba      	ldrb	r2, [r7, #6]
 80003c0:	0312      	lsls	r2, r2, #12
 80003c2:	4611      	mov	r1, r2
 80003c4:	4a58      	ldr	r2, [pc, #352]	; (8000528 <EXTI_SetMapping+0x238>)
 80003c6:	430b      	orrs	r3, r1
 80003c8:	6093      	str	r3, [r2, #8]
		break;
 80003ca:	e0a7      	b.n	800051c <EXTI_SetMapping+0x22c>
	case EXTI_LINE4:
		AFIO->EXTICR2 &= ~(0b1111 << 0);
 80003cc:	4b56      	ldr	r3, [pc, #344]	; (8000528 <EXTI_SetMapping+0x238>)
 80003ce:	68db      	ldr	r3, [r3, #12]
 80003d0:	4a55      	ldr	r2, [pc, #340]	; (8000528 <EXTI_SetMapping+0x238>)
 80003d2:	f023 030f 	bic.w	r3, r3, #15
 80003d6:	60d3      	str	r3, [r2, #12]
		AFIO->EXTICR2 |= (Port << 0);
 80003d8:	4b53      	ldr	r3, [pc, #332]	; (8000528 <EXTI_SetMapping+0x238>)
 80003da:	68da      	ldr	r2, [r3, #12]
 80003dc:	79bb      	ldrb	r3, [r7, #6]
 80003de:	4952      	ldr	r1, [pc, #328]	; (8000528 <EXTI_SetMapping+0x238>)
 80003e0:	4313      	orrs	r3, r2
 80003e2:	60cb      	str	r3, [r1, #12]
		break;
 80003e4:	e09a      	b.n	800051c <EXTI_SetMapping+0x22c>
	case EXTI_LINE5:
		AFIO->EXTICR2 &= ~(0b1111 << 4);
 80003e6:	4b50      	ldr	r3, [pc, #320]	; (8000528 <EXTI_SetMapping+0x238>)
 80003e8:	68db      	ldr	r3, [r3, #12]
 80003ea:	4a4f      	ldr	r2, [pc, #316]	; (8000528 <EXTI_SetMapping+0x238>)
 80003ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80003f0:	60d3      	str	r3, [r2, #12]
		AFIO->EXTICR2 |= (Port << 4);
 80003f2:	4b4d      	ldr	r3, [pc, #308]	; (8000528 <EXTI_SetMapping+0x238>)
 80003f4:	68db      	ldr	r3, [r3, #12]
 80003f6:	79ba      	ldrb	r2, [r7, #6]
 80003f8:	0112      	lsls	r2, r2, #4
 80003fa:	4611      	mov	r1, r2
 80003fc:	4a4a      	ldr	r2, [pc, #296]	; (8000528 <EXTI_SetMapping+0x238>)
 80003fe:	430b      	orrs	r3, r1
 8000400:	60d3      	str	r3, [r2, #12]
		break;
 8000402:	e08b      	b.n	800051c <EXTI_SetMapping+0x22c>
	case EXTI_LINE6:
		AFIO->EXTICR2 &= ~(0b1111 << 8);
 8000404:	4b48      	ldr	r3, [pc, #288]	; (8000528 <EXTI_SetMapping+0x238>)
 8000406:	68db      	ldr	r3, [r3, #12]
 8000408:	4a47      	ldr	r2, [pc, #284]	; (8000528 <EXTI_SetMapping+0x238>)
 800040a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800040e:	60d3      	str	r3, [r2, #12]
		AFIO->EXTICR2 |= (Port << 8);
 8000410:	4b45      	ldr	r3, [pc, #276]	; (8000528 <EXTI_SetMapping+0x238>)
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	79ba      	ldrb	r2, [r7, #6]
 8000416:	0212      	lsls	r2, r2, #8
 8000418:	4611      	mov	r1, r2
 800041a:	4a43      	ldr	r2, [pc, #268]	; (8000528 <EXTI_SetMapping+0x238>)
 800041c:	430b      	orrs	r3, r1
 800041e:	60d3      	str	r3, [r2, #12]
		break;
 8000420:	e07c      	b.n	800051c <EXTI_SetMapping+0x22c>
	case EXTI_LINE7:
		AFIO->EXTICR2 &= ~(0b1111 << 12);
 8000422:	4b41      	ldr	r3, [pc, #260]	; (8000528 <EXTI_SetMapping+0x238>)
 8000424:	68db      	ldr	r3, [r3, #12]
 8000426:	4a40      	ldr	r2, [pc, #256]	; (8000528 <EXTI_SetMapping+0x238>)
 8000428:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800042c:	60d3      	str	r3, [r2, #12]
		AFIO->EXTICR2 |= (Port << 12);
 800042e:	4b3e      	ldr	r3, [pc, #248]	; (8000528 <EXTI_SetMapping+0x238>)
 8000430:	68db      	ldr	r3, [r3, #12]
 8000432:	79ba      	ldrb	r2, [r7, #6]
 8000434:	0312      	lsls	r2, r2, #12
 8000436:	4611      	mov	r1, r2
 8000438:	4a3b      	ldr	r2, [pc, #236]	; (8000528 <EXTI_SetMapping+0x238>)
 800043a:	430b      	orrs	r3, r1
 800043c:	60d3      	str	r3, [r2, #12]
		break;
 800043e:	e06d      	b.n	800051c <EXTI_SetMapping+0x22c>
	case EXTI_LINE8:
		AFIO->EXTICR3 &= ~(0b1111 << 0);
 8000440:	4b39      	ldr	r3, [pc, #228]	; (8000528 <EXTI_SetMapping+0x238>)
 8000442:	691b      	ldr	r3, [r3, #16]
 8000444:	4a38      	ldr	r2, [pc, #224]	; (8000528 <EXTI_SetMapping+0x238>)
 8000446:	f023 030f 	bic.w	r3, r3, #15
 800044a:	6113      	str	r3, [r2, #16]
		AFIO->EXTICR3 |= (Port << 0);
 800044c:	4b36      	ldr	r3, [pc, #216]	; (8000528 <EXTI_SetMapping+0x238>)
 800044e:	691a      	ldr	r2, [r3, #16]
 8000450:	79bb      	ldrb	r3, [r7, #6]
 8000452:	4935      	ldr	r1, [pc, #212]	; (8000528 <EXTI_SetMapping+0x238>)
 8000454:	4313      	orrs	r3, r2
 8000456:	610b      	str	r3, [r1, #16]
		break;
 8000458:	e060      	b.n	800051c <EXTI_SetMapping+0x22c>
	case EXTI_LINE9:
		AFIO->EXTICR3 &= ~(0b1111 << 4);
 800045a:	4b33      	ldr	r3, [pc, #204]	; (8000528 <EXTI_SetMapping+0x238>)
 800045c:	691b      	ldr	r3, [r3, #16]
 800045e:	4a32      	ldr	r2, [pc, #200]	; (8000528 <EXTI_SetMapping+0x238>)
 8000460:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000464:	6113      	str	r3, [r2, #16]
		AFIO->EXTICR3 |= (Port << 4);
 8000466:	4b30      	ldr	r3, [pc, #192]	; (8000528 <EXTI_SetMapping+0x238>)
 8000468:	691b      	ldr	r3, [r3, #16]
 800046a:	79ba      	ldrb	r2, [r7, #6]
 800046c:	0112      	lsls	r2, r2, #4
 800046e:	4611      	mov	r1, r2
 8000470:	4a2d      	ldr	r2, [pc, #180]	; (8000528 <EXTI_SetMapping+0x238>)
 8000472:	430b      	orrs	r3, r1
 8000474:	6113      	str	r3, [r2, #16]
		break;
 8000476:	e051      	b.n	800051c <EXTI_SetMapping+0x22c>
	case EXTI_LINE10:
		AFIO->EXTICR3 &= ~(0b1111 << 8);
 8000478:	4b2b      	ldr	r3, [pc, #172]	; (8000528 <EXTI_SetMapping+0x238>)
 800047a:	691b      	ldr	r3, [r3, #16]
 800047c:	4a2a      	ldr	r2, [pc, #168]	; (8000528 <EXTI_SetMapping+0x238>)
 800047e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000482:	6113      	str	r3, [r2, #16]
		AFIO->EXTICR3 |= (Port << 8);
 8000484:	4b28      	ldr	r3, [pc, #160]	; (8000528 <EXTI_SetMapping+0x238>)
 8000486:	691b      	ldr	r3, [r3, #16]
 8000488:	79ba      	ldrb	r2, [r7, #6]
 800048a:	0212      	lsls	r2, r2, #8
 800048c:	4611      	mov	r1, r2
 800048e:	4a26      	ldr	r2, [pc, #152]	; (8000528 <EXTI_SetMapping+0x238>)
 8000490:	430b      	orrs	r3, r1
 8000492:	6113      	str	r3, [r2, #16]
		break;
 8000494:	e042      	b.n	800051c <EXTI_SetMapping+0x22c>
	case EXTI_LINE11:
		AFIO->EXTICR3 &= ~(0b1111 << 12);
 8000496:	4b24      	ldr	r3, [pc, #144]	; (8000528 <EXTI_SetMapping+0x238>)
 8000498:	691b      	ldr	r3, [r3, #16]
 800049a:	4a23      	ldr	r2, [pc, #140]	; (8000528 <EXTI_SetMapping+0x238>)
 800049c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80004a0:	6113      	str	r3, [r2, #16]
		AFIO->EXTICR3 |= (Port << 12);
 80004a2:	4b21      	ldr	r3, [pc, #132]	; (8000528 <EXTI_SetMapping+0x238>)
 80004a4:	691b      	ldr	r3, [r3, #16]
 80004a6:	79ba      	ldrb	r2, [r7, #6]
 80004a8:	0312      	lsls	r2, r2, #12
 80004aa:	4611      	mov	r1, r2
 80004ac:	4a1e      	ldr	r2, [pc, #120]	; (8000528 <EXTI_SetMapping+0x238>)
 80004ae:	430b      	orrs	r3, r1
 80004b0:	6113      	str	r3, [r2, #16]
		break;
 80004b2:	e033      	b.n	800051c <EXTI_SetMapping+0x22c>
	case EXTI_LINE12:
		AFIO->EXTICR4 &= ~(0b1111 << 0);
 80004b4:	4b1c      	ldr	r3, [pc, #112]	; (8000528 <EXTI_SetMapping+0x238>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	4a1b      	ldr	r2, [pc, #108]	; (8000528 <EXTI_SetMapping+0x238>)
 80004ba:	f023 030f 	bic.w	r3, r3, #15
 80004be:	6153      	str	r3, [r2, #20]
		AFIO->EXTICR4 |= (Port << 0);
 80004c0:	4b19      	ldr	r3, [pc, #100]	; (8000528 <EXTI_SetMapping+0x238>)
 80004c2:	695a      	ldr	r2, [r3, #20]
 80004c4:	79bb      	ldrb	r3, [r7, #6]
 80004c6:	4918      	ldr	r1, [pc, #96]	; (8000528 <EXTI_SetMapping+0x238>)
 80004c8:	4313      	orrs	r3, r2
 80004ca:	614b      	str	r3, [r1, #20]
		break;
 80004cc:	e026      	b.n	800051c <EXTI_SetMapping+0x22c>
	case EXTI_LINE13:
		AFIO->EXTICR4 &= ~(0b1111 << 0);
 80004ce:	4b16      	ldr	r3, [pc, #88]	; (8000528 <EXTI_SetMapping+0x238>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4a15      	ldr	r2, [pc, #84]	; (8000528 <EXTI_SetMapping+0x238>)
 80004d4:	f023 030f 	bic.w	r3, r3, #15
 80004d8:	6153      	str	r3, [r2, #20]
		AFIO->EXTICR4 |= (Port << 0);
 80004da:	4b13      	ldr	r3, [pc, #76]	; (8000528 <EXTI_SetMapping+0x238>)
 80004dc:	695a      	ldr	r2, [r3, #20]
 80004de:	79bb      	ldrb	r3, [r7, #6]
 80004e0:	4911      	ldr	r1, [pc, #68]	; (8000528 <EXTI_SetMapping+0x238>)
 80004e2:	4313      	orrs	r3, r2
 80004e4:	614b      	str	r3, [r1, #20]
		break;
 80004e6:	e019      	b.n	800051c <EXTI_SetMapping+0x22c>
	case EXTI_LINE14:
		AFIO->EXTICR4 &= ~(0b1111 << 0);
 80004e8:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <EXTI_SetMapping+0x238>)
 80004ea:	695b      	ldr	r3, [r3, #20]
 80004ec:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <EXTI_SetMapping+0x238>)
 80004ee:	f023 030f 	bic.w	r3, r3, #15
 80004f2:	6153      	str	r3, [r2, #20]
		AFIO->EXTICR4 |= (Port << 0);
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <EXTI_SetMapping+0x238>)
 80004f6:	695a      	ldr	r2, [r3, #20]
 80004f8:	79bb      	ldrb	r3, [r7, #6]
 80004fa:	490b      	ldr	r1, [pc, #44]	; (8000528 <EXTI_SetMapping+0x238>)
 80004fc:	4313      	orrs	r3, r2
 80004fe:	614b      	str	r3, [r1, #20]
		break;
 8000500:	e00c      	b.n	800051c <EXTI_SetMapping+0x22c>
	case EXTI_LINE15:
		AFIO->EXTICR4 &= ~(0b1111 << 0);
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <EXTI_SetMapping+0x238>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	4a08      	ldr	r2, [pc, #32]	; (8000528 <EXTI_SetMapping+0x238>)
 8000508:	f023 030f 	bic.w	r3, r3, #15
 800050c:	6153      	str	r3, [r2, #20]
		AFIO->EXTICR4 |= (Port << 0);
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <EXTI_SetMapping+0x238>)
 8000510:	695a      	ldr	r2, [r3, #20]
 8000512:	79bb      	ldrb	r3, [r7, #6]
 8000514:	4904      	ldr	r1, [pc, #16]	; (8000528 <EXTI_SetMapping+0x238>)
 8000516:	4313      	orrs	r3, r2
 8000518:	614b      	str	r3, [r1, #20]
		break;
 800051a:	bf00      	nop
	}
	}
}
 800051c:	bf00      	nop
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40010000 	.word	0x40010000

0800052c <EXTI_SetCallBack>:
void EXTI_SetCallBack(Int_Line IntLine,void(*pf)(void))
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	6039      	str	r1, [r7, #0]
 8000536:	71fb      	strb	r3, [r7, #7]
	if(IntLine <= 15 && IntLine >= 0)
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	2b0f      	cmp	r3, #15
 800053c:	d804      	bhi.n	8000548 <EXTI_SetCallBack+0x1c>
	{
	Pf_callBack[IntLine] = pf;
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	4904      	ldr	r1, [pc, #16]	; (8000554 <EXTI_SetCallBack+0x28>)
 8000542:	683a      	ldr	r2, [r7, #0]
 8000544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20000024 	.word	0x20000024

08000558 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	SET_BIT(EXTI->PR, EXTI_LINE0);
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <EXTI0_IRQHandler+0x1c>)
 800055e:	695b      	ldr	r3, [r3, #20]
 8000560:	4a04      	ldr	r2, [pc, #16]	; (8000574 <EXTI0_IRQHandler+0x1c>)
 8000562:	f043 0301 	orr.w	r3, r3, #1
 8000566:	6153      	str	r3, [r2, #20]
	Pf_callBack[EXTI_LINE0]();
 8000568:	4b03      	ldr	r3, [pc, #12]	; (8000578 <EXTI0_IRQHandler+0x20>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4798      	blx	r3

}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40010400 	.word	0x40010400
 8000578:	20000024 	.word	0x20000024

0800057c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	SET_BIT(EXTI->PR, EXTI_LINE1);
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <EXTI1_IRQHandler+0x1c>)
 8000582:	695b      	ldr	r3, [r3, #20]
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <EXTI1_IRQHandler+0x1c>)
 8000586:	f043 0302 	orr.w	r3, r3, #2
 800058a:	6153      	str	r3, [r2, #20]
	Pf_callBack[EXTI_LINE1]();
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <EXTI1_IRQHandler+0x20>)
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	4798      	blx	r3

}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40010400 	.word	0x40010400
 800059c:	20000024 	.word	0x20000024

080005a0 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	SET_BIT(EXTI->PR, EXTI_LINE2);
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <EXTI2_IRQHandler+0x1c>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <EXTI2_IRQHandler+0x1c>)
 80005aa:	f043 0304 	orr.w	r3, r3, #4
 80005ae:	6153      	str	r3, [r2, #20]
	Pf_callBack[EXTI_LINE2]();
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <EXTI2_IRQHandler+0x20>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	4798      	blx	r3

}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40010400 	.word	0x40010400
 80005c0:	20000024 	.word	0x20000024

080005c4 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	SET_BIT(EXTI->PR, EXTI_LINE3);
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <EXTI3_IRQHandler+0x1c>)
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <EXTI3_IRQHandler+0x1c>)
 80005ce:	f043 0308 	orr.w	r3, r3, #8
 80005d2:	6153      	str	r3, [r2, #20]
	Pf_callBack[EXTI_LINE3]();
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <EXTI3_IRQHandler+0x20>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	4798      	blx	r3

}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40010400 	.word	0x40010400
 80005e4:	20000024 	.word	0x20000024

080005e8 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	SET_BIT(EXTI->PR, EXTI_LINE4);
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <EXTI4_IRQHandler+0x1c>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	4a04      	ldr	r2, [pc, #16]	; (8000604 <EXTI4_IRQHandler+0x1c>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	6153      	str	r3, [r2, #20]
	Pf_callBack[EXTI_LINE4]();
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <EXTI4_IRQHandler+0x20>)
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	4798      	blx	r3

}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40010400 	.word	0x40010400
 8000608:	20000024 	.word	0x20000024

0800060c <RCC_EnableHSE>:
		//select HSI as system clock
		CLR_BIT(RCC->CFGR,0);
		CLR_BIT(RCC->CFGR,1);
}
void RCC_EnableHSE(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
	//enable HSE
	SET_BIT(RCC->CR, 16);
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <RCC_EnableHSE+0x4c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a10      	ldr	r2, [pc, #64]	; (8000658 <RCC_EnableHSE+0x4c>)
 8000616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800061a:	6013      	str	r3, [r2, #0]
	//wait for flag
	while(GET_BIT(RCC->CR, 17) == 0);
 800061c:	bf00      	nop
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <RCC_EnableHSE+0x4c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000626:	2b00      	cmp	r3, #0
 8000628:	d0f9      	beq.n	800061e <RCC_EnableHSE+0x12>
	//clear flag
	CLR_BIT(RCC->CIR,19);
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <RCC_EnableHSE+0x4c>)
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <RCC_EnableHSE+0x4c>)
 8000630:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000634:	6093      	str	r3, [r2, #8]
	//select HSE
	SET_BIT(RCC->CFGR,0);
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <RCC_EnableHSE+0x4c>)
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	4a07      	ldr	r2, [pc, #28]	; (8000658 <RCC_EnableHSE+0x4c>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6053      	str	r3, [r2, #4]
	CLR_BIT(RCC->CFGR,1);
 8000642:	4b05      	ldr	r3, [pc, #20]	; (8000658 <RCC_EnableHSE+0x4c>)
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	4a04      	ldr	r2, [pc, #16]	; (8000658 <RCC_EnableHSE+0x4c>)
 8000648:	f023 0302 	bic.w	r3, r3, #2
 800064c:	6053      	str	r3, [r2, #4]
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000

0800065c <RCC_EnablePeriphalClk>:
 * AHB_DIV128
 * AHB_DIV256
 * AHB_DIV512
 */
void RCC_EnablePeriphalClk(uint8_t BusName,uint8_t Periphal)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	460a      	mov	r2, r1
 8000666:	71fb      	strb	r3, [r7, #7]
 8000668:	4613      	mov	r3, r2
 800066a:	71bb      	strb	r3, [r7, #6]
	switch(BusName)
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	2b02      	cmp	r3, #2
 8000670:	d01c      	beq.n	80006ac <RCC_EnablePeriphalClk+0x50>
 8000672:	2b02      	cmp	r3, #2
 8000674:	dc25      	bgt.n	80006c2 <RCC_EnablePeriphalClk+0x66>
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <RCC_EnablePeriphalClk+0x24>
 800067a:	2b01      	cmp	r3, #1
 800067c:	d00b      	beq.n	8000696 <RCC_EnablePeriphalClk+0x3a>
		break;
	case APB2_BUS :
		SET_BIT(RCC->APB2ENR,Periphal);
		break;
	}
}
 800067e:	e020      	b.n	80006c2 <RCC_EnablePeriphalClk+0x66>
		SET_BIT(RCC->AHBENR,Periphal);
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <RCC_EnablePeriphalClk+0x70>)
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	79ba      	ldrb	r2, [r7, #6]
 8000686:	2101      	movs	r1, #1
 8000688:	fa01 f202 	lsl.w	r2, r1, r2
 800068c:	4611      	mov	r1, r2
 800068e:	4a0f      	ldr	r2, [pc, #60]	; (80006cc <RCC_EnablePeriphalClk+0x70>)
 8000690:	430b      	orrs	r3, r1
 8000692:	6153      	str	r3, [r2, #20]
		break;
 8000694:	e015      	b.n	80006c2 <RCC_EnablePeriphalClk+0x66>
		SET_BIT(RCC->APB1ENR,Periphal);
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <RCC_EnablePeriphalClk+0x70>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	79ba      	ldrb	r2, [r7, #6]
 800069c:	2101      	movs	r1, #1
 800069e:	fa01 f202 	lsl.w	r2, r1, r2
 80006a2:	4611      	mov	r1, r2
 80006a4:	4a09      	ldr	r2, [pc, #36]	; (80006cc <RCC_EnablePeriphalClk+0x70>)
 80006a6:	430b      	orrs	r3, r1
 80006a8:	61d3      	str	r3, [r2, #28]
		break;
 80006aa:	e00a      	b.n	80006c2 <RCC_EnablePeriphalClk+0x66>
		SET_BIT(RCC->APB2ENR,Periphal);
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <RCC_EnablePeriphalClk+0x70>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	79ba      	ldrb	r2, [r7, #6]
 80006b2:	2101      	movs	r1, #1
 80006b4:	fa01 f202 	lsl.w	r2, r1, r2
 80006b8:	4611      	mov	r1, r2
 80006ba:	4a04      	ldr	r2, [pc, #16]	; (80006cc <RCC_EnablePeriphalClk+0x70>)
 80006bc:	430b      	orrs	r3, r1
 80006be:	6193      	str	r3, [r2, #24]
		break;
 80006c0:	bf00      	nop
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	40021000 	.word	0x40021000

080006d0 <USART_Init>:
 * 				USART1 for example has TX at PA9 and RX at PA10
 * 					so you need to make PA9 as output,AF
 * 										PA10 as input,pull pull
 * 				cant make it on my own, it is the user responsibility
 */
void USART_Init(USART_Num usart_num) {
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
	switch (usart_num) {
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b02      	cmp	r3, #2
 80006de:	d065      	beq.n	80007ac <USART_Init+0xdc>
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	f300 8092 	bgt.w	800080a <USART_Init+0x13a>
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d002      	beq.n	80006f0 <USART_Init+0x20>
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d02f      	beq.n	800074e <USART_Init+0x7e>
		SET_BIT(USART3->CR1, 3);
		SET_BIT(USART3->CR1, 2);
		break;

	}
}
 80006ee:	e08c      	b.n	800080a <USART_Init+0x13a>
		CLR_BIT(USART1->CR1, 12);
 80006f0:	4b48      	ldr	r3, [pc, #288]	; (8000814 <USART_Init+0x144>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	4a47      	ldr	r2, [pc, #284]	; (8000814 <USART_Init+0x144>)
 80006f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80006fa:	60d3      	str	r3, [r2, #12]
		CLR_BIT(USART1->CR1, 10);
 80006fc:	4b45      	ldr	r3, [pc, #276]	; (8000814 <USART_Init+0x144>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	4a44      	ldr	r2, [pc, #272]	; (8000814 <USART_Init+0x144>)
 8000702:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000706:	60d3      	str	r3, [r2, #12]
		CLR_BIT(USART1->CR2, 12);
 8000708:	4b42      	ldr	r3, [pc, #264]	; (8000814 <USART_Init+0x144>)
 800070a:	691b      	ldr	r3, [r3, #16]
 800070c:	4a41      	ldr	r2, [pc, #260]	; (8000814 <USART_Init+0x144>)
 800070e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000712:	6113      	str	r3, [r2, #16]
		CLR_BIT(USART1->CR2, 13);
 8000714:	4b3f      	ldr	r3, [pc, #252]	; (8000814 <USART_Init+0x144>)
 8000716:	691b      	ldr	r3, [r3, #16]
 8000718:	4a3e      	ldr	r2, [pc, #248]	; (8000814 <USART_Init+0x144>)
 800071a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800071e:	6113      	str	r3, [r2, #16]
		USART1->BRR = 0x349;
 8000720:	4b3c      	ldr	r3, [pc, #240]	; (8000814 <USART_Init+0x144>)
 8000722:	f240 3249 	movw	r2, #841	; 0x349
 8000726:	609a      	str	r2, [r3, #8]
		SET_BIT(USART1->CR1, 13);
 8000728:	4b3a      	ldr	r3, [pc, #232]	; (8000814 <USART_Init+0x144>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	4a39      	ldr	r2, [pc, #228]	; (8000814 <USART_Init+0x144>)
 800072e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000732:	60d3      	str	r3, [r2, #12]
		SET_BIT(USART1->CR1, 3);
 8000734:	4b37      	ldr	r3, [pc, #220]	; (8000814 <USART_Init+0x144>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	4a36      	ldr	r2, [pc, #216]	; (8000814 <USART_Init+0x144>)
 800073a:	f043 0308 	orr.w	r3, r3, #8
 800073e:	60d3      	str	r3, [r2, #12]
		SET_BIT(USART1->CR1, 2);
 8000740:	4b34      	ldr	r3, [pc, #208]	; (8000814 <USART_Init+0x144>)
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	4a33      	ldr	r2, [pc, #204]	; (8000814 <USART_Init+0x144>)
 8000746:	f043 0304 	orr.w	r3, r3, #4
 800074a:	60d3      	str	r3, [r2, #12]
		break;
 800074c:	e05d      	b.n	800080a <USART_Init+0x13a>
		CLR_BIT(USART2->CR1, 12);
 800074e:	4b32      	ldr	r3, [pc, #200]	; (8000818 <USART_Init+0x148>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	4a31      	ldr	r2, [pc, #196]	; (8000818 <USART_Init+0x148>)
 8000754:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000758:	60d3      	str	r3, [r2, #12]
		CLR_BIT(USART2->CR1, 10);
 800075a:	4b2f      	ldr	r3, [pc, #188]	; (8000818 <USART_Init+0x148>)
 800075c:	68db      	ldr	r3, [r3, #12]
 800075e:	4a2e      	ldr	r2, [pc, #184]	; (8000818 <USART_Init+0x148>)
 8000760:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000764:	60d3      	str	r3, [r2, #12]
		CLR_BIT(USART2->CR2, 12);
 8000766:	4b2c      	ldr	r3, [pc, #176]	; (8000818 <USART_Init+0x148>)
 8000768:	691b      	ldr	r3, [r3, #16]
 800076a:	4a2b      	ldr	r2, [pc, #172]	; (8000818 <USART_Init+0x148>)
 800076c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000770:	6113      	str	r3, [r2, #16]
		CLR_BIT(USART2->CR2, 13);
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <USART_Init+0x148>)
 8000774:	691b      	ldr	r3, [r3, #16]
 8000776:	4a28      	ldr	r2, [pc, #160]	; (8000818 <USART_Init+0x148>)
 8000778:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800077c:	6113      	str	r3, [r2, #16]
		USART2->BRR = 0x349;
 800077e:	4b26      	ldr	r3, [pc, #152]	; (8000818 <USART_Init+0x148>)
 8000780:	f240 3249 	movw	r2, #841	; 0x349
 8000784:	609a      	str	r2, [r3, #8]
		SET_BIT(USART2->CR1, 13);
 8000786:	4b24      	ldr	r3, [pc, #144]	; (8000818 <USART_Init+0x148>)
 8000788:	68db      	ldr	r3, [r3, #12]
 800078a:	4a23      	ldr	r2, [pc, #140]	; (8000818 <USART_Init+0x148>)
 800078c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000790:	60d3      	str	r3, [r2, #12]
		SET_BIT(USART2->CR1, 3);
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <USART_Init+0x148>)
 8000794:	68db      	ldr	r3, [r3, #12]
 8000796:	4a20      	ldr	r2, [pc, #128]	; (8000818 <USART_Init+0x148>)
 8000798:	f043 0308 	orr.w	r3, r3, #8
 800079c:	60d3      	str	r3, [r2, #12]
		SET_BIT(USART2->CR1, 2);
 800079e:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <USART_Init+0x148>)
 80007a0:	68db      	ldr	r3, [r3, #12]
 80007a2:	4a1d      	ldr	r2, [pc, #116]	; (8000818 <USART_Init+0x148>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	60d3      	str	r3, [r2, #12]
		break;
 80007aa:	e02e      	b.n	800080a <USART_Init+0x13a>
		CLR_BIT(USART3->CR1, 12);
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <USART_Init+0x14c>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	4a1a      	ldr	r2, [pc, #104]	; (800081c <USART_Init+0x14c>)
 80007b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007b6:	60d3      	str	r3, [r2, #12]
		CLR_BIT(USART3->CR1, 10);
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <USART_Init+0x14c>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	4a17      	ldr	r2, [pc, #92]	; (800081c <USART_Init+0x14c>)
 80007be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80007c2:	60d3      	str	r3, [r2, #12]
		CLR_BIT(USART3->CR2, 12);
 80007c4:	4b15      	ldr	r3, [pc, #84]	; (800081c <USART_Init+0x14c>)
 80007c6:	691b      	ldr	r3, [r3, #16]
 80007c8:	4a14      	ldr	r2, [pc, #80]	; (800081c <USART_Init+0x14c>)
 80007ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007ce:	6113      	str	r3, [r2, #16]
		CLR_BIT(USART3->CR2, 13);
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <USART_Init+0x14c>)
 80007d2:	691b      	ldr	r3, [r3, #16]
 80007d4:	4a11      	ldr	r2, [pc, #68]	; (800081c <USART_Init+0x14c>)
 80007d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80007da:	6113      	str	r3, [r2, #16]
		USART3->BRR = 0x349;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <USART_Init+0x14c>)
 80007de:	f240 3249 	movw	r2, #841	; 0x349
 80007e2:	609a      	str	r2, [r3, #8]
		SET_BIT(USART3->CR1, 13);
 80007e4:	4b0d      	ldr	r3, [pc, #52]	; (800081c <USART_Init+0x14c>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	4a0c      	ldr	r2, [pc, #48]	; (800081c <USART_Init+0x14c>)
 80007ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007ee:	60d3      	str	r3, [r2, #12]
		SET_BIT(USART3->CR1, 3);
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <USART_Init+0x14c>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	4a09      	ldr	r2, [pc, #36]	; (800081c <USART_Init+0x14c>)
 80007f6:	f043 0308 	orr.w	r3, r3, #8
 80007fa:	60d3      	str	r3, [r2, #12]
		SET_BIT(USART3->CR1, 2);
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <USART_Init+0x14c>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	4a06      	ldr	r2, [pc, #24]	; (800081c <USART_Init+0x14c>)
 8000802:	f043 0304 	orr.w	r3, r3, #4
 8000806:	60d3      	str	r3, [r2, #12]
		break;
 8000808:	bf00      	nop
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	40013800 	.word	0x40013800
 8000818:	40004400 	.word	0x40004400
 800081c:	40004800 	.word	0x40004800

08000820 <USART_TransmitByteSynch>:
void USART_TransmitByteSynch(USART_Num usart_num, uint8_t Data) {
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	460a      	mov	r2, r1
 800082a:	71fb      	strb	r3, [r7, #7]
 800082c:	4613      	mov	r3, r2
 800082e:	71bb      	strb	r3, [r7, #6]
	switch (usart_num) {
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	2b02      	cmp	r3, #2
 8000834:	d036      	beq.n	80008a4 <USART_TransmitByteSynch+0x84>
 8000836:	2b02      	cmp	r3, #2
 8000838:	dc4c      	bgt.n	80008d4 <USART_TransmitByteSynch+0xb4>
 800083a:	2b00      	cmp	r3, #0
 800083c:	d002      	beq.n	8000844 <USART_TransmitByteSynch+0x24>
 800083e:	2b01      	cmp	r3, #1
 8000840:	d018      	beq.n	8000874 <USART_TransmitByteSynch+0x54>
			;
		// Clear the transmission complete flag
		CLR_BIT(USART3->SR, 6);
		break;
	}
}
 8000842:	e047      	b.n	80008d4 <USART_TransmitByteSynch+0xb4>
		while (!(GET_BIT(USART1->SR, 7)))
 8000844:	bf00      	nop
 8000846:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <USART_TransmitByteSynch+0xc0>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	2b00      	cmp	r3, #0
 8000850:	d0f9      	beq.n	8000846 <USART_TransmitByteSynch+0x26>
		USART1->DR = Data;
 8000852:	4a23      	ldr	r2, [pc, #140]	; (80008e0 <USART_TransmitByteSynch+0xc0>)
 8000854:	79bb      	ldrb	r3, [r7, #6]
 8000856:	6053      	str	r3, [r2, #4]
		while (!(GET_BIT(USART1->SR, 6)))
 8000858:	bf00      	nop
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <USART_TransmitByteSynch+0xc0>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000862:	2b00      	cmp	r3, #0
 8000864:	d0f9      	beq.n	800085a <USART_TransmitByteSynch+0x3a>
		CLR_BIT(USART1->SR, 6);
 8000866:	4b1e      	ldr	r3, [pc, #120]	; (80008e0 <USART_TransmitByteSynch+0xc0>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a1d      	ldr	r2, [pc, #116]	; (80008e0 <USART_TransmitByteSynch+0xc0>)
 800086c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000870:	6013      	str	r3, [r2, #0]
		break;
 8000872:	e02f      	b.n	80008d4 <USART_TransmitByteSynch+0xb4>
		while (!(GET_BIT(USART2->SR, 7)))
 8000874:	bf00      	nop
 8000876:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <USART_TransmitByteSynch+0xc4>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087e:	2b00      	cmp	r3, #0
 8000880:	d0f9      	beq.n	8000876 <USART_TransmitByteSynch+0x56>
		USART2->DR = Data;
 8000882:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <USART_TransmitByteSynch+0xc4>)
 8000884:	79bb      	ldrb	r3, [r7, #6]
 8000886:	6053      	str	r3, [r2, #4]
		while (!(GET_BIT(USART2->SR, 6)))
 8000888:	bf00      	nop
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <USART_TransmitByteSynch+0xc4>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000892:	2b00      	cmp	r3, #0
 8000894:	d0f9      	beq.n	800088a <USART_TransmitByteSynch+0x6a>
		CLR_BIT(USART2->SR, 6);
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <USART_TransmitByteSynch+0xc4>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <USART_TransmitByteSynch+0xc4>)
 800089c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80008a0:	6013      	str	r3, [r2, #0]
		break;
 80008a2:	e017      	b.n	80008d4 <USART_TransmitByteSynch+0xb4>
		while (!(GET_BIT(USART3->SR, 7)))
 80008a4:	bf00      	nop
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <USART_TransmitByteSynch+0xc8>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d0f9      	beq.n	80008a6 <USART_TransmitByteSynch+0x86>
		USART3->DR = Data;
 80008b2:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <USART_TransmitByteSynch+0xc8>)
 80008b4:	79bb      	ldrb	r3, [r7, #6]
 80008b6:	6053      	str	r3, [r2, #4]
		while (!(GET_BIT(USART3->SR, 6)))
 80008b8:	bf00      	nop
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <USART_TransmitByteSynch+0xc8>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d0f9      	beq.n	80008ba <USART_TransmitByteSynch+0x9a>
		CLR_BIT(USART3->SR, 6);
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <USART_TransmitByteSynch+0xc8>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a07      	ldr	r2, [pc, #28]	; (80008e8 <USART_TransmitByteSynch+0xc8>)
 80008cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80008d0:	6013      	str	r3, [r2, #0]
		break;
 80008d2:	bf00      	nop
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40013800 	.word	0x40013800
 80008e4:	40004400 	.word	0x40004400
 80008e8:	40004800 	.word	0x40004800

080008ec <USART1_IRQHandler>:
{
	SET_BIT(USART1->CR1, 7);
	USART3_CallBack = pf;
}

void USART1_IRQHandler(void){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	if(USART1_CallBack != NULL)
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <USART1_IRQHandler+0x1c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d005      	beq.n	8000904 <USART1_IRQHandler+0x18>
		{
			USART1_CallBack();
 80008f8:	4b03      	ldr	r3, [pc, #12]	; (8000908 <USART1_IRQHandler+0x1c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4798      	blx	r3
			USART1_CallBack = NULL;//just to make interrupt happens one time if you want peroic call setback in while
 80008fe:	4b02      	ldr	r3, [pc, #8]	; (8000908 <USART1_IRQHandler+0x1c>)
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
		}
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000064 	.word	0x20000064

0800090c <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	if(USART2_CallBack != NULL)
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <USART2_IRQHandler+0x1c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d005      	beq.n	8000924 <USART2_IRQHandler+0x18>
	{
		USART2_CallBack();
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <USART2_IRQHandler+0x1c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4798      	blx	r3
		USART2_CallBack = NULL;//just to make interrupt happens one time if you want peroic call setback in while
 800091e:	4b02      	ldr	r3, [pc, #8]	; (8000928 <USART2_IRQHandler+0x1c>)
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
	}

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000068 	.word	0x20000068

0800092c <USART3_IRQHandler>:
void USART3_IRQHandler(void){
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	if(USART3_CallBack != NULL)
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <USART3_IRQHandler+0x1c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d005      	beq.n	8000944 <USART3_IRQHandler+0x18>
		{
			USART3_CallBack();
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <USART3_IRQHandler+0x1c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4798      	blx	r3
			USART3_CallBack = NULL;//just to make interrupt happens one time if you want peroic call setback in while
 800093e:	4b02      	ldr	r3, [pc, #8]	; (8000948 <USART3_IRQHandler+0x1c>)
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
		}
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	2000006c 	.word	0x2000006c

0800094c <GPIO_Init>:

#include "MCAL_Drivers/gpio.h"
#include "Common/BIT_Math.h"
#include "Common/Std_Types.h"

void GPIO_Init(uint8_t Port, uint8_t Pin, uint8_t Direction, uint8_t Mode) {
 800094c:	b490      	push	{r4, r7}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	4604      	mov	r4, r0
 8000954:	4608      	mov	r0, r1
 8000956:	4611      	mov	r1, r2
 8000958:	461a      	mov	r2, r3
 800095a:	4623      	mov	r3, r4
 800095c:	71fb      	strb	r3, [r7, #7]
 800095e:	4603      	mov	r3, r0
 8000960:	71bb      	strb	r3, [r7, #6]
 8000962:	460b      	mov	r3, r1
 8000964:	717b      	strb	r3, [r7, #5]
 8000966:	4613      	mov	r3, r2
 8000968:	713b      	strb	r3, [r7, #4]
	uint8_t LocalPortValue = Port;
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	737b      	strb	r3, [r7, #13]
	uint8_t LocalPinValue;
	uint8_t LocalDirectionValue = Direction;
 800096e:	797b      	ldrb	r3, [r7, #5]
 8000970:	733b      	strb	r3, [r7, #12]
	uint8_t LocalModeValue = Mode;
 8000972:	793b      	ldrb	r3, [r7, #4]
 8000974:	72fb      	strb	r3, [r7, #11]
	uint8_t CR_LOW_or_High;

	// to get position for the pin in the register
	uint8_t PinPos;
	// decide if it is CRL or CRH
	if (Pin > 7 && Pin <= 15)
 8000976:	79bb      	ldrb	r3, [r7, #6]
 8000978:	2b07      	cmp	r3, #7
 800097a:	d908      	bls.n	800098e <GPIO_Init+0x42>
 800097c:	79bb      	ldrb	r3, [r7, #6]
 800097e:	2b0f      	cmp	r3, #15
 8000980:	d805      	bhi.n	800098e <GPIO_Init+0x42>
	{
		// CRH
		LocalPinValue = Pin - 8;
 8000982:	79bb      	ldrb	r3, [r7, #6]
 8000984:	3b08      	subs	r3, #8
 8000986:	73fb      	strb	r3, [r7, #15]
		CR_LOW_or_High = 1; //CRH
 8000988:	2301      	movs	r3, #1
 800098a:	73bb      	strb	r3, [r7, #14]
 800098c:	e003      	b.n	8000996 <GPIO_Init+0x4a>
	}
	else
	{
		//CRL
		LocalPinValue = Pin;
 800098e:	79bb      	ldrb	r3, [r7, #6]
 8000990:	73fb      	strb	r3, [r7, #15]
		CR_LOW_or_High = 0; //CRL
 8000992:	2300      	movs	r3, #0
 8000994:	73bb      	strb	r3, [r7, #14]
	}
	//get pin position for the pin in the register
	PinPos = LocalPinValue << 2;
 8000996:	7bfb      	ldrb	r3, [r7, #15]
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	72bb      	strb	r3, [r7, #10]

	if (CR_LOW_or_High)
 800099c:	7bbb      	ldrb	r3, [r7, #14]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d06e      	beq.n	8000a80 <GPIO_Init+0x134>
	{ //CRH
		if (LocalPortValue >= 0 && LocalPortValue <= 3)
 80009a2:	7b7b      	ldrb	r3, [r7, #13]
 80009a4:	2b03      	cmp	r3, #3
 80009a6:	f200 80d8 	bhi.w	8000b5a <GPIO_Init+0x20e>
		{
			switch (LocalPortValue)
 80009aa:	7b7b      	ldrb	r3, [r7, #13]
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d047      	beq.n	8000a40 <GPIO_Init+0xf4>
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	f300 80d2 	bgt.w	8000b5a <GPIO_Init+0x20e>
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d002      	beq.n	80009c0 <GPIO_Init+0x74>
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d020      	beq.n	8000a00 <GPIO_Init+0xb4>

			}

		}
	}
}
 80009be:	e0cc      	b.n	8000b5a <GPIO_Init+0x20e>
				GPIOA->CRH &= ~(0xFUL << PinPos);
 80009c0:	4b68      	ldr	r3, [pc, #416]	; (8000b64 <GPIO_Init+0x218>)
 80009c2:	685a      	ldr	r2, [r3, #4]
 80009c4:	7abb      	ldrb	r3, [r7, #10]
 80009c6:	210f      	movs	r1, #15
 80009c8:	fa01 f303 	lsl.w	r3, r1, r3
 80009cc:	43db      	mvns	r3, r3
 80009ce:	4965      	ldr	r1, [pc, #404]	; (8000b64 <GPIO_Init+0x218>)
 80009d0:	4013      	ands	r3, r2
 80009d2:	604b      	str	r3, [r1, #4]
				GPIOA->CRH |= LocalDirectionValue << PinPos;
 80009d4:	4b63      	ldr	r3, [pc, #396]	; (8000b64 <GPIO_Init+0x218>)
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	7b39      	ldrb	r1, [r7, #12]
 80009da:	7aba      	ldrb	r2, [r7, #10]
 80009dc:	fa01 f202 	lsl.w	r2, r1, r2
 80009e0:	4611      	mov	r1, r2
 80009e2:	4a60      	ldr	r2, [pc, #384]	; (8000b64 <GPIO_Init+0x218>)
 80009e4:	430b      	orrs	r3, r1
 80009e6:	6053      	str	r3, [r2, #4]
				GPIOA->CRH |= LocalModeValue << (PinPos + 2);
 80009e8:	4b5e      	ldr	r3, [pc, #376]	; (8000b64 <GPIO_Init+0x218>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	7af9      	ldrb	r1, [r7, #11]
 80009ee:	7aba      	ldrb	r2, [r7, #10]
 80009f0:	3202      	adds	r2, #2
 80009f2:	fa01 f202 	lsl.w	r2, r1, r2
 80009f6:	4611      	mov	r1, r2
 80009f8:	4a5a      	ldr	r2, [pc, #360]	; (8000b64 <GPIO_Init+0x218>)
 80009fa:	430b      	orrs	r3, r1
 80009fc:	6053      	str	r3, [r2, #4]
				break;
 80009fe:	e0ac      	b.n	8000b5a <GPIO_Init+0x20e>
				GPIOB->CRH &= ~(0xFUL << PinPos);
 8000a00:	4b59      	ldr	r3, [pc, #356]	; (8000b68 <GPIO_Init+0x21c>)
 8000a02:	685a      	ldr	r2, [r3, #4]
 8000a04:	7abb      	ldrb	r3, [r7, #10]
 8000a06:	210f      	movs	r1, #15
 8000a08:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	4956      	ldr	r1, [pc, #344]	; (8000b68 <GPIO_Init+0x21c>)
 8000a10:	4013      	ands	r3, r2
 8000a12:	604b      	str	r3, [r1, #4]
				GPIOB->CRH |= LocalDirectionValue << PinPos;
 8000a14:	4b54      	ldr	r3, [pc, #336]	; (8000b68 <GPIO_Init+0x21c>)
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	7b39      	ldrb	r1, [r7, #12]
 8000a1a:	7aba      	ldrb	r2, [r7, #10]
 8000a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a20:	4611      	mov	r1, r2
 8000a22:	4a51      	ldr	r2, [pc, #324]	; (8000b68 <GPIO_Init+0x21c>)
 8000a24:	430b      	orrs	r3, r1
 8000a26:	6053      	str	r3, [r2, #4]
				GPIOB->CRH |= LocalModeValue << (PinPos + 2);
 8000a28:	4b4f      	ldr	r3, [pc, #316]	; (8000b68 <GPIO_Init+0x21c>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	7af9      	ldrb	r1, [r7, #11]
 8000a2e:	7aba      	ldrb	r2, [r7, #10]
 8000a30:	3202      	adds	r2, #2
 8000a32:	fa01 f202 	lsl.w	r2, r1, r2
 8000a36:	4611      	mov	r1, r2
 8000a38:	4a4b      	ldr	r2, [pc, #300]	; (8000b68 <GPIO_Init+0x21c>)
 8000a3a:	430b      	orrs	r3, r1
 8000a3c:	6053      	str	r3, [r2, #4]
				break;
 8000a3e:	e08c      	b.n	8000b5a <GPIO_Init+0x20e>
				GPIOC->CRH &= ~(0xFUL << PinPos);
 8000a40:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <GPIO_Init+0x220>)
 8000a42:	685a      	ldr	r2, [r3, #4]
 8000a44:	7abb      	ldrb	r3, [r7, #10]
 8000a46:	210f      	movs	r1, #15
 8000a48:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	4947      	ldr	r1, [pc, #284]	; (8000b6c <GPIO_Init+0x220>)
 8000a50:	4013      	ands	r3, r2
 8000a52:	604b      	str	r3, [r1, #4]
				GPIOC->CRH |= LocalDirectionValue << PinPos;
 8000a54:	4b45      	ldr	r3, [pc, #276]	; (8000b6c <GPIO_Init+0x220>)
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	7b39      	ldrb	r1, [r7, #12]
 8000a5a:	7aba      	ldrb	r2, [r7, #10]
 8000a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a60:	4611      	mov	r1, r2
 8000a62:	4a42      	ldr	r2, [pc, #264]	; (8000b6c <GPIO_Init+0x220>)
 8000a64:	430b      	orrs	r3, r1
 8000a66:	6053      	str	r3, [r2, #4]
				GPIOC->CRH |= LocalModeValue << (PinPos + 2);
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <GPIO_Init+0x220>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	7af9      	ldrb	r1, [r7, #11]
 8000a6e:	7aba      	ldrb	r2, [r7, #10]
 8000a70:	3202      	adds	r2, #2
 8000a72:	fa01 f202 	lsl.w	r2, r1, r2
 8000a76:	4611      	mov	r1, r2
 8000a78:	4a3c      	ldr	r2, [pc, #240]	; (8000b6c <GPIO_Init+0x220>)
 8000a7a:	430b      	orrs	r3, r1
 8000a7c:	6053      	str	r3, [r2, #4]
				break;
 8000a7e:	e06c      	b.n	8000b5a <GPIO_Init+0x20e>
		if (LocalPortValue >= 0 && LocalPortValue <= 3)
 8000a80:	7b7b      	ldrb	r3, [r7, #13]
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d869      	bhi.n	8000b5a <GPIO_Init+0x20e>
			switch (LocalPortValue)
 8000a86:	7b7b      	ldrb	r3, [r7, #13]
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d046      	beq.n	8000b1a <GPIO_Init+0x1ce>
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	dc64      	bgt.n	8000b5a <GPIO_Init+0x20e>
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d002      	beq.n	8000a9a <GPIO_Init+0x14e>
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d020      	beq.n	8000ada <GPIO_Init+0x18e>
}
 8000a98:	e05f      	b.n	8000b5a <GPIO_Init+0x20e>
				GPIOA->CRL &= ~(0xFUL << PinPos);
 8000a9a:	4b32      	ldr	r3, [pc, #200]	; (8000b64 <GPIO_Init+0x218>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	7abb      	ldrb	r3, [r7, #10]
 8000aa0:	210f      	movs	r1, #15
 8000aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	492e      	ldr	r1, [pc, #184]	; (8000b64 <GPIO_Init+0x218>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	600b      	str	r3, [r1, #0]
				GPIOA->CRL |= LocalDirectionValue << PinPos;
 8000aae:	4b2d      	ldr	r3, [pc, #180]	; (8000b64 <GPIO_Init+0x218>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	7b39      	ldrb	r1, [r7, #12]
 8000ab4:	7aba      	ldrb	r2, [r7, #10]
 8000ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aba:	4611      	mov	r1, r2
 8000abc:	4a29      	ldr	r2, [pc, #164]	; (8000b64 <GPIO_Init+0x218>)
 8000abe:	430b      	orrs	r3, r1
 8000ac0:	6013      	str	r3, [r2, #0]
				GPIOA->CRL |= LocalModeValue << (PinPos + 2);
 8000ac2:	4b28      	ldr	r3, [pc, #160]	; (8000b64 <GPIO_Init+0x218>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	7af9      	ldrb	r1, [r7, #11]
 8000ac8:	7aba      	ldrb	r2, [r7, #10]
 8000aca:	3202      	adds	r2, #2
 8000acc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	4a24      	ldr	r2, [pc, #144]	; (8000b64 <GPIO_Init+0x218>)
 8000ad4:	430b      	orrs	r3, r1
 8000ad6:	6013      	str	r3, [r2, #0]
				break;
 8000ad8:	e03f      	b.n	8000b5a <GPIO_Init+0x20e>
				GPIOB->CRL &= ~(0xFUL << PinPos);
 8000ada:	4b23      	ldr	r3, [pc, #140]	; (8000b68 <GPIO_Init+0x21c>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	7abb      	ldrb	r3, [r7, #10]
 8000ae0:	210f      	movs	r1, #15
 8000ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	491f      	ldr	r1, [pc, #124]	; (8000b68 <GPIO_Init+0x21c>)
 8000aea:	4013      	ands	r3, r2
 8000aec:	600b      	str	r3, [r1, #0]
				GPIOB->CRL |= LocalDirectionValue << PinPos;
 8000aee:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <GPIO_Init+0x21c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	7b39      	ldrb	r1, [r7, #12]
 8000af4:	7aba      	ldrb	r2, [r7, #10]
 8000af6:	fa01 f202 	lsl.w	r2, r1, r2
 8000afa:	4611      	mov	r1, r2
 8000afc:	4a1a      	ldr	r2, [pc, #104]	; (8000b68 <GPIO_Init+0x21c>)
 8000afe:	430b      	orrs	r3, r1
 8000b00:	6013      	str	r3, [r2, #0]
				GPIOB->CRL |= LocalModeValue << (PinPos + 2);
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <GPIO_Init+0x21c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	7af9      	ldrb	r1, [r7, #11]
 8000b08:	7aba      	ldrb	r2, [r7, #10]
 8000b0a:	3202      	adds	r2, #2
 8000b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b10:	4611      	mov	r1, r2
 8000b12:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <GPIO_Init+0x21c>)
 8000b14:	430b      	orrs	r3, r1
 8000b16:	6013      	str	r3, [r2, #0]
				break;
 8000b18:	e01f      	b.n	8000b5a <GPIO_Init+0x20e>
				GPIOC->CRL &= ~(0xFUL << PinPos);
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <GPIO_Init+0x220>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	7abb      	ldrb	r3, [r7, #10]
 8000b20:	210f      	movs	r1, #15
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	4910      	ldr	r1, [pc, #64]	; (8000b6c <GPIO_Init+0x220>)
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	600b      	str	r3, [r1, #0]
				GPIOC->CRL |= LocalDirectionValue << PinPos;
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <GPIO_Init+0x220>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	7b39      	ldrb	r1, [r7, #12]
 8000b34:	7aba      	ldrb	r2, [r7, #10]
 8000b36:	fa01 f202 	lsl.w	r2, r1, r2
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4a0b      	ldr	r2, [pc, #44]	; (8000b6c <GPIO_Init+0x220>)
 8000b3e:	430b      	orrs	r3, r1
 8000b40:	6013      	str	r3, [r2, #0]
				GPIOC->CRL |= LocalModeValue << (PinPos + 2);
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <GPIO_Init+0x220>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	7af9      	ldrb	r1, [r7, #11]
 8000b48:	7aba      	ldrb	r2, [r7, #10]
 8000b4a:	3202      	adds	r2, #2
 8000b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b50:	4611      	mov	r1, r2
 8000b52:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <GPIO_Init+0x220>)
 8000b54:	430b      	orrs	r3, r1
 8000b56:	6013      	str	r3, [r2, #0]
				break;
 8000b58:	bf00      	nop
}
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc90      	pop	{r4, r7}
 8000b62:	4770      	bx	lr
 8000b64:	40010800 	.word	0x40010800
 8000b68:	40010c00 	.word	0x40010c00
 8000b6c:	40011000 	.word	0x40011000

08000b70 <main>:

//EXTI1
void app_two(void);

int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	//Clock Configuration
	RCC_EnableHSE();
 8000b74:	f7ff fd4a 	bl	800060c <RCC_EnableHSE>
	RCC_EnablePeriphalClk(APB2_BUS, GPIOA_EN);
 8000b78:	2102      	movs	r1, #2
 8000b7a:	2002      	movs	r0, #2
 8000b7c:	f7ff fd6e 	bl	800065c <RCC_EnablePeriphalClk>
	RCC_EnablePeriphalClk(APB2_BUS, GPIOB_EN);
 8000b80:	2103      	movs	r1, #3
 8000b82:	2002      	movs	r0, #2
 8000b84:	f7ff fd6a 	bl	800065c <RCC_EnablePeriphalClk>
	RCC_EnablePeriphalClk(APB2_BUS, GPIOC_EN);
 8000b88:	2104      	movs	r1, #4
 8000b8a:	2002      	movs	r0, #2
 8000b8c:	f7ff fd66 	bl	800065c <RCC_EnablePeriphalClk>
	RCC_EnablePeriphalClk(APB2_BUS, USART1_EN);
 8000b90:	210e      	movs	r1, #14
 8000b92:	2002      	movs	r0, #2
 8000b94:	f7ff fd62 	bl	800065c <RCC_EnablePeriphalClk>
	RCC_EnablePeriphalClk(APB2_BUS, AFIO_EN);
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2002      	movs	r0, #2
 8000b9c:	f7ff fd5e 	bl	800065c <RCC_EnablePeriphalClk>

	//Push Button
	GPIO_Init(PORTB, PIN0, INPUT, INPUT_PULL);
 8000ba0:	230a      	movs	r3, #10
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f7ff fed0 	bl	800094c <GPIO_Init>
	GPIO_Init(PORTB, PIN1, INPUT, INPUT_PULL);
 8000bac:	230a      	movs	r3, #10
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f7ff feca 	bl	800094c <GPIO_Init>

	//USART PINS INIT
	GPIO_Init(PORTA, PIN9, OUTPUT_10MHZ, OUTPUT_ALF_PUSH_PULL);
 8000bb8:	230a      	movs	r3, #10
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2109      	movs	r1, #9
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff fec4 	bl	800094c <GPIO_Init>
	GPIO_Init(PORTA, PIN10, INPUT, INPUT_PULL);
 8000bc4:	230a      	movs	r3, #10
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	210a      	movs	r1, #10
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f7ff febe 	bl	800094c <GPIO_Init>

	//EXTI0
	EXTI_SetEdge(EXTI_LINE0, EXTI_Rising_Edge);
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f7ff fb2e 	bl	8000234 <EXTI_SetEdge>
	EXTI_SetMapping(EXTI_LINE0, PORTB);
 8000bd8:	2101      	movs	r1, #1
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f7ff fb88 	bl	80002f0 <EXTI_SetMapping>
	EXTI_SetCallBack(EXTI_LINE0, &app_one);
 8000be0:	490f      	ldr	r1, [pc, #60]	; (8000c20 <main+0xb0>)
 8000be2:	2000      	movs	r0, #0
 8000be4:	f7ff fca2 	bl	800052c <EXTI_SetCallBack>
	NVIC_EnableIRQ(EXTI0_IRQn);
 8000be8:	2006      	movs	r0, #6
 8000bea:	f7ff fac1 	bl	8000170 <NVIC_EnableIRQ>
	EXTI_EnableIntLine(EXTI_LINE0);
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f7ff fb06 	bl	8000200 <EXTI_EnableIntLine>

	//EXTI1
	EXTI_SetEdge(EXTI_LINE1, EXTI_Rising_Edge);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f7ff fb1c 	bl	8000234 <EXTI_SetEdge>
	EXTI_SetMapping(EXTI_LINE1, PORTB);
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f7ff fb76 	bl	80002f0 <EXTI_SetMapping>
	EXTI_SetCallBack(EXTI_LINE1, &app_two);
 8000c04:	4907      	ldr	r1, [pc, #28]	; (8000c24 <main+0xb4>)
 8000c06:	2001      	movs	r0, #1
 8000c08:	f7ff fc90 	bl	800052c <EXTI_SetCallBack>
	NVIC_EnableIRQ(EXTI1_IRQn);
 8000c0c:	2007      	movs	r0, #7
 8000c0e:	f7ff faaf 	bl	8000170 <NVIC_EnableIRQ>
	EXTI_EnableIntLine(EXTI_LINE1);
 8000c12:	2001      	movs	r0, #1
 8000c14:	f7ff faf4 	bl	8000200 <EXTI_EnableIntLine>

	//USART
	USART_Init(USART_ID_1);
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fd59 	bl	80006d0 <USART_Init>

	while(1)
 8000c1e:	e7fe      	b.n	8000c1e <main+0xae>
 8000c20:	08000c29 	.word	0x08000c29
 8000c24:	08000c39 	.word	0x08000c39

08000c28 <app_one>:
	{

	}
}
void app_one(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

	USART_TransmitByteSynch(USART_ID_1, 'a');
 8000c2c:	2161      	movs	r1, #97	; 0x61
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f7ff fdf6 	bl	8000820 <USART_TransmitByteSynch>
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <app_two>:
void app_two(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	USART_TransmitByteSynch(USART_ID_1, 'b');
 8000c3c:	2162      	movs	r1, #98	; 0x62
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff fdee 	bl	8000820 <USART_TransmitByteSynch>
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c48:	480d      	ldr	r0, [pc, #52]	; (8000c80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c4a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c4c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c50:	480c      	ldr	r0, [pc, #48]	; (8000c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c52:	490d      	ldr	r1, [pc, #52]	; (8000c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <LoopForever+0xe>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c68:	4c0a      	ldr	r4, [pc, #40]	; (8000c94 <LoopForever+0x16>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c76:	f000 f811 	bl	8000c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c7a:	f7ff ff79 	bl	8000b70 <main>

08000c7e <LoopForever>:

LoopForever:
  b LoopForever
 8000c7e:	e7fe      	b.n	8000c7e <LoopForever>
  ldr   r0, =_estack
 8000c80:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000c8c:	08000d04 	.word	0x08000d04
  ldr r2, =_sbss
 8000c90:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000c94:	20000070 	.word	0x20000070

08000c98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC1_2_IRQHandler>
	...

08000c9c <__libc_init_array>:
 8000c9c:	b570      	push	{r4, r5, r6, lr}
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4d0c      	ldr	r5, [pc, #48]	; (8000cd4 <__libc_init_array+0x38>)
 8000ca2:	4c0d      	ldr	r4, [pc, #52]	; (8000cd8 <__libc_init_array+0x3c>)
 8000ca4:	1b64      	subs	r4, r4, r5
 8000ca6:	10a4      	asrs	r4, r4, #2
 8000ca8:	42a6      	cmp	r6, r4
 8000caa:	d109      	bne.n	8000cc0 <__libc_init_array+0x24>
 8000cac:	f000 f81a 	bl	8000ce4 <_init>
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	4d0a      	ldr	r5, [pc, #40]	; (8000cdc <__libc_init_array+0x40>)
 8000cb4:	4c0a      	ldr	r4, [pc, #40]	; (8000ce0 <__libc_init_array+0x44>)
 8000cb6:	1b64      	subs	r4, r4, r5
 8000cb8:	10a4      	asrs	r4, r4, #2
 8000cba:	42a6      	cmp	r6, r4
 8000cbc:	d105      	bne.n	8000cca <__libc_init_array+0x2e>
 8000cbe:	bd70      	pop	{r4, r5, r6, pc}
 8000cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cc4:	4798      	blx	r3
 8000cc6:	3601      	adds	r6, #1
 8000cc8:	e7ee      	b.n	8000ca8 <__libc_init_array+0xc>
 8000cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cce:	4798      	blx	r3
 8000cd0:	3601      	adds	r6, #1
 8000cd2:	e7f2      	b.n	8000cba <__libc_init_array+0x1e>
 8000cd4:	08000cfc 	.word	0x08000cfc
 8000cd8:	08000cfc 	.word	0x08000cfc
 8000cdc:	08000cfc 	.word	0x08000cfc
 8000ce0:	08000d00 	.word	0x08000d00

08000ce4 <_init>:
 8000ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ce6:	bf00      	nop
 8000ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cea:	bc08      	pop	{r3}
 8000cec:	469e      	mov	lr, r3
 8000cee:	4770      	bx	lr

08000cf0 <_fini>:
 8000cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf2:	bf00      	nop
 8000cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cf6:	bc08      	pop	{r3}
 8000cf8:	469e      	mov	lr, r3
 8000cfa:	4770      	bx	lr
